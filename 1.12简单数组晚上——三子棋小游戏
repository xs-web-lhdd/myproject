#include<stdio.h>
#include<stdlib.h>
#include<time.h>
void menu()
{
	printf("****************************\n");
	printf("****   1.play   2.exit  ****\n");
	printf("****************************\n");
}
//游戏的整个算法实现
#define ROW 3
#define COL 3 
void InitBoard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for(i = 0; i <row ; i++)
	{
		for(j = 0; j < col; j++)
		{
			board[i][j] = ' ';	
		}
	}
}

//#####################################################################
//这样写很挫 
//void DisplayBoard(char board[ROW][COL],int row,int col)
//{
//	int i = 0;
//	for(i = 0; i < row; i++)
//	{
//		1.打印数据
//		printf(" %c | %c | %c \n",board[i][0],board[i][1],board[i][2]);
//		2.打印分割行 
//		if(i < row - 1)
//		printf("---|---|---\n");
//	}		
//}
//##############################################################################


void DisplayBoard(char board[ROW][COL],int row,int col)
{
	int i = 0;
	for(i = 0; i < row; i++)
	{
		//1.打印一行数据
		int j = 0;
		for(j = 0; j < col; j++)
		{
			printf(" %c ",board[i][j]);
			if(j < col - 1)
			{
				printf("|");
			}
		}
		printf("\n");
		//2.打印分割行
		if (i < row - 1)
		{
			for(j = 0; j < col; j++)
			{
				printf("---");
				if(j < col - 1)
				{
					printf("|");
				}
			}
			printf("\n");	
		} 
	}		
}
void Playermove(char board[ROW][COL],int row,int col)
{
	int x = 0;
	int y = 0; 
	printf("玩家走:>\n");
	while(1)
	{
		printf("请输入要下的坐标:>");
		scanf("%d%d", &x, &y);
		//判断x，y坐标的合理性
		if(x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if(board[x-1][y-1] == ' ')
			{
				board[x-1][y-1] = '*';
				break;
			}
			else
			{
				printf("该坐标被占用!\n");
			}
		} 
		else
		{
			printf("坐标非法，请重新输入！\n"); 
		}
	}
}
void Computermove(char board[ROW][COL],int row ,int col)
{
	int x = 0;
	int y = 0;
	printf("电脑走:>\n");
	while(1)
	{
		x = rand()%row;
		y = rand()%col;
		if(board[x][y] == ' ')
		{
			board[x][y] = '#';
			break;
		}
	}
}
//玩家赢——'*'
//电脑赢——'#'
//平局 
//继续——'C' 
int IsFull(char board[ROW][COL],int row,int col)
{
	//返回1满了
	//返回0，没满
	int i = 0;
	int j = 0;
	for(i = 0;i< row;i++)
	{
		for(j = 0;j<col;j++)
		{
			if(board[i][j] == ' ')
			return 0;
		}
	} 
	return 1;
}
char Iswin(char board[ROW][COL],int row,int col)
{
	int i = 0;
	//行三 
	for(i = 0; i < row; i++)
	{
		if(board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][1] != ' ')
		{
			return board[i][1];
		}
	}
	//数散列 
	for(i= 0; i < col ;i++)
	{
		if(board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[1][i] != ' ')
		{
			return board[1][i];
		}
	}
	//两个对角线 
	if(board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
	{
		return board[1][1];
	}
	if(board[2][0] == board[1][1] && board[1][1] == board[0][2] && board[1][1] != ' ')
	{
		return board[1][1];
	}
	//是否平局
	if(1 == IsFull(board,ROW,COL))
	{
		return 'Q';
	}
	return 'C';
}
void game()
{
	char ret = 0;
	//数组——存放走时的棋盘信息；
	 char board[ROW][COL] = {0};
	 //初始化棋盘 
	 InitBoard(board,ROW,COL);
	 //打印棋盘 
	 DisplayBoard(board,ROW,COL); 
	 while(1)
	 {
	 	//玩家下棋
	 	Playermove(board,ROW,COL);
	 	DisplayBoard(board,ROW,COL); 
	 	//判断玩家是否赢 
	 	ret = Iswin(board,ROW,COL);
		 if(ret != 'C')
		 {
		 	break;
		 } 
		//电脑下棋 
		Computermove(board,ROW,COL);
		DisplayBoard(board,ROW,COL);
		//判断电脑是否赢 
		ret = Iswin(board,ROW,COL);
		if(ret != 'C')
		{
			break;
		}
	 }
	 if(ret == '*')
	 {
	 	printf("玩家赢！\n");
	 } 
	 else if(ret == '#')
	 {
	 	printf("电脑赢！\n");
	 } 
	 else
	 {
	 	printf("平局哦！\n");
	 }
}
void test()
{
	int input = 0;
	srand((unsigned int) time(NULL));
	do
	{
		menu();
		printf("请选择:>");
		scanf("%d",&input);
		switch (input)
		{
			case 1:
				printf("三子棋\n");
				game();
				break;
			case 0:
				printf("退出游戏\n");
				break;
			default:
				printf("选择错误，请重新选择！\n");
				break;
		}
	}while(input);
}
int main()
{
	test(); 
	return 0;
} 
